From 7917579a9541b1ef207e950f697165e622b55fee Mon Sep 17 00:00:00 2001
From: Gianluca Arbezzano <gianarb92@gmail.com>
Date: Sun, 15 Mar 2020 14:34:41 +0100
Subject: [PATCH] fix(pay): Trace with B3 and opentelemetry

Signed-off-by: Gianluca Arbezzano <gianarb92@gmail.com>
---
 pay/.gitignore                               |  10 ++
 pay/build.gradle                             |   6 +
 pay/gradlew                                  | 172 -------------------
 pay/src/main/java/pay/AppConfig.java         |   1 +
 pay/src/main/java/pay/Application.java       |  22 +++
 pay/src/main/java/pay/TracerInterceptor.java |  63 +++++++
 6 files changed, 102 insertions(+), 172 deletions(-)
 create mode 100644 pay/.gitignore
 delete mode 100755 pay/gradlew
 create mode 100644 pay/src/main/java/pay/TracerInterceptor.java

diff --git a/pay/.gitignore b/pay/.gitignore
new file mode 100644
index 0000000..70463c2
--- /dev/null
+++ b/pay/.gitignore
@@ -0,0 +1,10 @@
+.gradle
+build
+.settings
+.idea
+.project
+gradle/wrapper/gradle-wrapper.jar
+gradle/wrapper/gradle-wrapper.properties
+gradlew
+gradlew.bat
+
diff --git a/pay/build.gradle b/pay/build.gradle
index 50bb905..422f0ed 100644
--- a/pay/build.gradle
+++ b/pay/build.gradle
@@ -33,6 +33,12 @@ dependencies {
     compile("org.springframework.boot:spring-boot-starter-web"){ exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'}
     compile('org.springframework.boot:spring-boot-starter-log4j2')
     testCompile('org.springframework.boot:spring-boot-starter-test')
+    compile('io.opentelemetry:opentelemetry-api:0.2.4')
+    compile('io.opentelemetry:opentelemetry-sdk:0.2.4')
+    compile('io.opentelemetry:opentelemetry-exporters-jaeger:0.2.4')
+    compile('io.opentelemetry:opentelemetry-exporters-logging:0.2.4')
+    compile('io.grpc:grpc-protobuf:1.24.0')
+    compile('io.grpc:grpc-netty-shaded:1.24.0')
 }
 
 
diff --git a/pay/gradlew b/pay/gradlew
deleted file mode 100755
index cccdd3d..0000000
--- a/pay/gradlew
+++ /dev/null
@@ -1,172 +0,0 @@
-#!/usr/bin/env sh
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn () {
-    echo "$*"
-}
-
-die () {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-nonstop=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
-esac
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-    JAVACMD=`cygpath --unix "$JAVACMD"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Escape application args
-save () {
-    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
-    echo " "
-}
-APP_ARGS=$(save "$@")
-
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
-
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
-  cd "$(dirname "$0")"
-fi
-
-exec "$JAVACMD" "$@"
diff --git a/pay/src/main/java/pay/AppConfig.java b/pay/src/main/java/pay/AppConfig.java
index bb788cb..d6e780a 100644
--- a/pay/src/main/java/pay/AppConfig.java
+++ b/pay/src/main/java/pay/AppConfig.java
@@ -10,5 +10,6 @@ public class AppConfig extends WebMvcConfigurerAdapter  {
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LoggerInterceptor());
+       registry.addInterceptor(new TracerInterceptor());
     }
 }
diff --git a/pay/src/main/java/pay/Application.java b/pay/src/main/java/pay/Application.java
index 1d8d39d..201fd73 100644
--- a/pay/src/main/java/pay/Application.java
+++ b/pay/src/main/java/pay/Application.java
@@ -1,5 +1,11 @@
 package pay;
 
+import io.grpc.ManagedChannel;
+import io.grpc.ManagedChannelBuilder;
+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;
+import io.opentelemetry.exporters.logging.LoggingSpanExporter;
+import io.opentelemetry.sdk.OpenTelemetrySdk;
+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.http.ResponseEntity;
@@ -54,7 +60,23 @@ public class Application {
     }
 
     public static void main(String[] args) {
+        // Create a channel towards Jaeger end point
+        ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress("jaeger", 14250).usePlaintext().build();
+        // Export traces to Jaeger
+
+        JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()
+                .setServiceName("pay")
+                .setChannel(jaegerChannel)
+                .setDeadlineMs(30000)
+                .build();
+        // Export also to the console
+        LoggingSpanExporter loggingExporter = new LoggingSpanExporter();
+        OpenTelemetrySdk.getTracerProvider().addSpanProcessor(SimpleSpansProcessor.newBuilder(loggingExporter).build());
+        // Set to process the spans by the Jaeger Exporter
+        OpenTelemetrySdk.getTracerProvider()
+                .addSpanProcessor(SimpleSpansProcessor.newBuilder(jaegerExporter).build());
         SpringApplication.run(Application.class, args);
     }
 
 }
+
diff --git a/pay/src/main/java/pay/TracerInterceptor.java b/pay/src/main/java/pay/TracerInterceptor.java
new file mode 100644
index 0000000..a37a508
--- /dev/null
+++ b/pay/src/main/java/pay/TracerInterceptor.java
@@ -0,0 +1,63 @@
+package pay;
+
+import com.sun.net.httpserver.HttpExchange;
+import io.opentelemetry.OpenTelemetry;
+import io.opentelemetry.context.propagation.HttpTextFormat;
+import io.opentelemetry.trace.Span;
+import io.opentelemetry.trace.SpanContext;
+import io.opentelemetry.trace.Tracer;
+import io.opentelemetry.trace.propagation.B3Propagator;
+import org.springframework.stereotype.Component;
+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import java.io.IOException;
+import java.net.URL;
+
+@Component
+public class TracerInterceptor
+        extends HandlerInterceptorAdapter {
+    // OTel API
+    private Tracer tracer =
+            OpenTelemetry.getTracerProvider().get("io.opentelemetry.pay.JaegerExample");
+
+    // false -> we expect multi header
+    B3Propagator b3Propagator = new B3Propagator(false);
+
+    B3Propagator.Getter<HttpServletRequest> getter = new B3Propagator.Getter<HttpServletRequest>() {
+        @javax.annotation.Nullable
+        @Override
+        public String get(HttpServletRequest carrier, String key) {
+            return carrier.getHeader(key);
+        }
+    };
+    private Span span;
+
+    @Override
+    public boolean preHandle(
+            HttpServletRequest request,
+            HttpServletResponse response,
+            Object handler) throws IOException {
+        URL url = new URL(request.getRequestURL().toString());
+        SpanContext remoteCtx = b3Propagator.extract(request, getter);
+        Span.Builder spanBuilder = tracer.spanBuilder(String.format("[%s] %d:%s", request.getMethod(), url.getPort(), url.getPath())).setSpanKind(Span.Kind.SERVER);
+        if(remoteCtx != null){
+            spanBuilder.setParent(remoteCtx);
+        }
+        span = spanBuilder.startSpan();
+        span.setAttribute("http.method", request.getMethod());
+        span.setAttribute("http.url", url.toString());
+        return true;
+    }
+    @Override
+    public void afterCompletion(
+            HttpServletRequest request,
+            HttpServletResponse response,
+            Object handler,
+            Exception ex) {
+        span.setAttribute("http.status_code", response.getStatus());
+        span.end();
+    }
+}
-- 
2.23.0

