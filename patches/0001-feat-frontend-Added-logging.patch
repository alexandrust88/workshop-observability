From a305d0c7fcd110767c6ef696eb927d79b896e017 Mon Sep 17 00:00:00 2001
From: Gianluca Arbezzano <gianarb92@gmail.com>
Date: Thu, 14 Mar 2019 19:17:55 +0100
Subject: [PATCH] feat(frontend): Added logging

Signed-off-by: Gianluca Arbezzano <gianarb92@gmail.com>
---
 frontend/go.mod              |  7 ++++++-
 frontend/go.sum              |  6 ++++++
 frontend/handler/getitems.go | 18 ++++++++++++++++++
 frontend/handler/health.go   |  9 +++++++++
 frontend/handler/pay.go      |  8 ++++++++
 frontend/main.go             | 34 +++++++++++++++++++++++++++++-----
 6 files changed, 76 insertions(+), 6 deletions(-)

diff --git a/frontend/go.mod b/frontend/go.mod
index c9f9ab6..d86b3cb 100644
--- a/frontend/go.mod
+++ b/frontend/go.mod
@@ -2,4 +2,9 @@ module github.com/gianarb/shopmany/frontend
 
 go 1.12
 
-require github.com/jessevdk/go-flags v1.4.0
+require (
+	github.com/jessevdk/go-flags v1.4.0
+	go.uber.org/atomic v1.3.2 // indirect
+	go.uber.org/multierr v1.1.0 // indirect
+	go.uber.org/zap v1.9.1
+)
diff --git a/frontend/go.sum b/frontend/go.sum
index bc46dae..ab7c346 100644
--- a/frontend/go.sum
+++ b/frontend/go.sum
@@ -1,3 +1,9 @@
 github.com/gianarb/shopmany v0.0.0-20190313091614-ac1c2f0595da h1:DxIHt5N7dhhxgDsk9pFvl4DAoggKEtNvQTOA7ZmC2eU=
 github.com/jessevdk/go-flags v1.4.0 h1:4IU2WS7AumrZ/40jfhf4QVDMsQwqA7VEHozFRrGARJA=
 github.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=
+go.uber.org/atomic v1.3.2 h1:2Oa65PReHzfn29GpvgsYwloV9AVFHPDk8tYxt2c2tr4=
+go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
+go.uber.org/multierr v1.1.0 h1:HoEmRHQPVSqub6w2z2d2EOVs2fjyFRGyofhKuyDq0QI=
+go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
+go.uber.org/zap v1.9.1 h1:XCJQEf3W6eZaVwhRBof6ImoYGJSITeKWsyeh3HFu/5o=
+go.uber.org/zap v1.9.1/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
diff --git a/frontend/handler/getitems.go b/frontend/handler/getitems.go
index 5019d55..54a3d32 100644
--- a/frontend/handler/getitems.go
+++ b/frontend/handler/getitems.go
@@ -9,6 +9,7 @@ import (
 	"strconv"
 
 	"github.com/gianarb/shopmany/frontend/config"
+	"go.uber.org/zap"
 )
 
 type ItemsResponse struct {
@@ -62,27 +63,41 @@ func getDiscountPerItem(ctx context.Context, hclient *http.Client, itemID int, d
 type getItemsHandler struct {
 	config  config.Config
 	hclient *http.Client
+	logger  *zap.Logger
 }
 
 func NewGetItemsHandler(config config.Config, hclient *http.Client) *getItemsHandler {
+	logger, _ := zap.NewProduction()
 	return &getItemsHandler{
 		config:  config,
 		hclient: hclient,
+		logger:  logger,
 	}
 }
 
+func (h *getItemsHandler) WithLogger(logger *zap.Logger) {
+	h.logger = logger
+}
+
 func (h *getItemsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	ctx := r.Context()
 	w.Header().Add("Content-Type", "application/json")
 	req, err := http.NewRequest("GET", fmt.Sprintf("%s/item", h.config.ItemHost), nil)
 	if err != nil {
+		h.logger.Error(err.Error())
 		http.Error(w, err.Error(), 500)
 		return
 	}
 	resp, err := h.hclient.Do(req)
+	if err != nil {
+		h.logger.Error(err.Error())
+		http.Error(w, err.Error(), 500)
+		return
+	}
 	defer resp.Body.Close()
 	body, err := ioutil.ReadAll(resp.Body)
 	if err != nil {
+		h.logger.Error(err.Error())
 		http.Error(w, err.Error(), 500)
 		return
 	}
@@ -91,6 +106,7 @@ func (h *getItemsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	}
 	err = json.Unmarshal(body, &items)
 	if err != nil {
+		h.logger.Error(err.Error())
 		http.Error(w, err.Error(), 500)
 		return
 	}
@@ -98,6 +114,7 @@ func (h *getItemsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	for k, item := range items.Items {
 		d, err := getDiscountPerItem(ctx, h.hclient, item.ID, h.config.DiscountHost)
 		if err != nil {
+			h.logger.Error(err.Error())
 			http.Error(w, err.Error(), 500)
 			continue
 		}
@@ -106,6 +123,7 @@ func (h *getItemsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 
 	b, err := json.Marshal(items)
 	if err != nil {
+		h.logger.Error(err.Error())
 		http.Error(w, err.Error(), 500)
 		return
 	}
diff --git a/frontend/handler/health.go b/frontend/handler/health.go
index 733d28f..fa9e52f 100644
--- a/frontend/handler/health.go
+++ b/frontend/handler/health.go
@@ -7,6 +7,7 @@ import (
 	"net/http"
 
 	"github.com/gianarb/shopmany/frontend/config"
+	"go.uber.org/zap"
 )
 
 const unhealthy = "unhealty"
@@ -24,15 +25,22 @@ type check struct {
 }
 
 func NewHealthHandler(config config.Config, hclient *http.Client) *healthHandler {
+	logger, _ := zap.NewProduction()
 	return &healthHandler{
 		config:  config,
 		hclient: hclient,
+		logger:  logger,
 	}
 }
 
 type healthHandler struct {
 	config  config.Config
 	hclient *http.Client
+	logger  *zap.Logger
+}
+
+func (h *healthHandler) WithLogger(logger *zap.Logger) {
+	h.logger = logger
 }
 
 func (h *healthHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
@@ -51,6 +59,7 @@ func (h *healthHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 
 	body, err := json.Marshal(b)
 	if err != nil {
+		h.logger.Error(err.Error())
 		w.WriteHeader(500)
 	}
 	if b.Status == unhealthy {
diff --git a/frontend/handler/pay.go b/frontend/handler/pay.go
index b3a8a24..f3e5434 100644
--- a/frontend/handler/pay.go
+++ b/frontend/handler/pay.go
@@ -5,20 +5,28 @@ import (
 	"net/http"
 
 	"github.com/gianarb/shopmany/frontend/config"
+	"go.uber.org/zap"
 )
 
 type payHandler struct {
 	config  config.Config
 	hclient *http.Client
+	logger  *zap.Logger
 }
 
 func NewPayHandler(config config.Config, hclient *http.Client) *payHandler {
+	logger, _ := zap.NewProduction()
 	return &payHandler{
 		config:  config,
 		hclient: hclient,
+		logger:  logger,
 	}
 }
 
+func (h *payHandler) WithLogger(logger *zap.Logger) {
+	h.logger = logger
+}
+
 func (h *payHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	w.Header().Add("Content-Type", "application/json")
 	if r.Method != "POST" {
diff --git a/frontend/main.go b/frontend/main.go
index ee16adc..35a084c 100644
--- a/frontend/main.go
+++ b/frontend/main.go
@@ -8,9 +8,12 @@ import (
 	"github.com/gianarb/shopmany/frontend/config"
 	"github.com/gianarb/shopmany/frontend/handler"
 	flags "github.com/jessevdk/go-flags"
+	"go.uber.org/zap"
 )
 
 func main() {
+	logger, _ := zap.NewProduction()
+	defer logger.Sync()
 	config := config.Config{}
 	_, err := flags.Parse(&config)
 
@@ -22,14 +25,35 @@ func main() {
 	fmt.Printf("Pay Host: %v\n", config.PayHost)
 	fmt.Printf("Discount Host: %v\n", config.DiscountHost)
 
+	mux := http.NewServeMux()
+
 	httpClient := &http.Client{}
 	fs := http.FileServer(http.Dir("static"))
 
-	http.Handle("/", fs)
-	http.Handle("/api/items", handler.NewGetItemsHandler(config, httpClient))
-	http.Handle("/api/pay", handler.NewPayHandler(config, httpClient))
-	http.Handle("/health", handler.NewHealthHandler(config, httpClient))
+	httpdLogger := logger.With(zap.String("service", "httpd"))
+	getItemsHandler := handler.NewGetItemsHandler(config, httpClient)
+	getItemsHandler.WithLogger(logger)
+	payHandler := handler.NewPayHandler(config, httpClient)
+	payHandler.WithLogger(logger)
+	healthHandler := handler.NewHealthHandler(config, httpClient)
+	healthHandler.WithLogger(logger)
+
+	mux.Handle("/", fs)
+	mux.Handle("/api/items", getItemsHandler)
+	mux.Handle("/api/pay", payHandler)
+	mux.Handle("/health", healthHandler)
 
 	log.Println("Listening on port 3000...")
-	http.ListenAndServe(":3000", nil)
+	http.ListenAndServe(":3000", loggingMiddleware(httpdLogger.With(zap.String("from", "middleware")), mux))
+}
+
+func loggingMiddleware(logger *zap.Logger, h http.Handler) http.Handler {
+	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
+		logger.Info(
+			"HTTP Request",
+			zap.String("Path", r.URL.Path),
+			zap.String("Method", r.Method),
+			zap.String("RemoteAddr", r.RemoteAddr))
+		h.ServeHTTP(w, r)
+	})
 }
-- 
2.23.0

